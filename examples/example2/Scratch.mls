:d
:unifyDbg
:unify
let version: string -> (int, int)
let breaking_change (maj, min) = (maj > 2, min == 17)
let deploy package =
    let (_, minor_version_breaking) = breaking_change (version package) in
    if minor_version_breaking
        then print_endline "don't deploy"
        else print_endline "deploy"
//│ 1. Typing type string -> (int, int,)
//│ | vars=Map() newDefsInfo=Map()
//│ => (string -> ([int], [int],)) | 
//│ ⬤ U Typed as: (string -> ([int], [int],))
//│  where: 
//│ 1. Typing term maj, min, => > maj 2, == min 17, Lam
//│ | 1. Typing pattern maj, min, Tup
//│ | | 1. Typing pattern maj Var
//│ | | 1. : α42'
//│ | | 1. Typing pattern min Var
//│ | | 1. : α43'
//│ | 1. : ([α42'], [α43'],)
//│ | 1. Typing term > maj 2, == min 17, Tup
//│ | | 1. Typing term > maj 2 App
//│ | | | 1. Typing term > maj App
//│ | | | | 1. Typing term > Var
//│ | | | | 1. : [(α44' -> (α44' -> bool))]
//│ | | | | 1. Typing term maj Var
//│ | | | | 1. : [α42']
//│ | | | | U Q [(α44' -> (α44' -> bool))] ~ ([α42'] -> α45')
//│ | | | | U L: 0 [(α44' -> (α44' -> bool)) ~ ([α42'] -> α45'), (α44' -> (α44' -> bool)) <: ([α42'] -> α45')]
//│ | | | | U class hmloc.TyperDatatypes$FunctionType and class hmloc.TyperDatatypes$FunctionType
//│ | | | | U Q α44' ~ [α42']
//│ | | | | U Q (α44' -> bool) ~ α45'
//│ | | | | U L: 1 [α44' ~ α42', [α44' - (α44' -> (α44' -> bool)) ~ ([α42'] -> α45') - α42', L: 0 [(α44' -> (α44' -> bool)) ~ ([α42'] -> α45'), (α44' -> (α44' -> bool)) <: ([α42'] -> α45')]]]
//│ | | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeVariable
//│ | | | | U L: 1 [(α44' -> bool) ~ α45', [(α44' -> bool) - (α44' -> (α44' -> bool)) ~ ([α42'] -> α45') - α45', L: 0 [(α44' -> (α44' -> bool)) ~ ([α42'] -> α45'), (α44' -> (α44' -> bool)) <: ([α42'] -> α45')]]]
//│ | | | | U class hmloc.TyperDatatypes$FunctionType and class hmloc.TyperDatatypes$TypeVariable
//│ | | | 1. : α45'
//│ | | | 1. Typing term 2 IntLit
//│ | | | 1. : [int]
//│ | | | U Q α45' ~ ([int] -> α46')
//│ | | | U L: 0 [α45' ~ ([int] -> α46'), α45' <: ([int] -> α46')]
//│ | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$FunctionType
//│ | | | U Q (α44' -> bool) ~ ([int] -> α46')
//│ | | | U L: 1 [(α44' -> bool) ~ ([int] -> α46'), [(α44' -> bool) - (α44' -> (α44' -> bool)) ~ ([α42'] -> α45') - α45', L: 0 [(α44' -> (α44' -> bool)) ~ ([α42'] -> α45'), (α44' -> (α44' -> bool)) <: ([α42'] -> α45')]], α45' <: ([int] -> α46')]
//│ | | | U class hmloc.TyperDatatypes$FunctionType and class hmloc.TyperDatatypes$FunctionType
//│ | | | U Q α44' ~ [int]
//│ | | | U Q bool ~ α46'
//│ | | | U L: 2 [α44' ~ int, [α44' - (α44' -> bool) ~ ([int] -> α46') - int, L: 1 [(α44' -> bool) ~ ([int] -> α46'), [(α44' -> bool) - (α44' -> (α44' -> bool)) ~ ([α42'] -> α45') - α45', L: 0 [(α44' -> (α44' -> bool)) ~ ([α42'] -> α45'), (α44' -> (α44' -> bool)) <: ([α42'] -> α45')]], α45' <: ([int] -> α46')]]]
//│ | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeRef
//│ | | | U Q [α42'] ~ [int]
//│ | | | U L: 2 [bool ~ α46', [bool - (α44' -> bool) ~ ([int] -> α46') - α46', L: 1 [(α44' -> bool) ~ ([int] -> α46'), [(α44' -> bool) - (α44' -> (α44' -> bool)) ~ ([α42'] -> α45') - α45', L: 0 [(α44' -> (α44' -> bool)) ~ ([α42'] -> α45'), (α44' -> (α44' -> bool)) <: ([α42'] -> α45')]], α45' <: ([int] -> α46')]]]
//│ | | | U class hmloc.TyperDatatypes$TypeRef and class hmloc.TyperDatatypes$TypeVariable
//│ | | | U L: 2 [α42' ~ int, [α42' - ([α42'] -> α45') ~ (α44' -> (α44' -> bool)) - α44', L: 0 [([α42'] -> α45') ~ (α44' -> (α44' -> bool)), ([α42'] -> α45') :> (α44' -> (α44' -> bool))]], [α44' - (α44' -> bool) ~ ([int] -> α46') - int, L: 1 [(α44' -> bool) ~ ([int] -> α46'), [(α44' -> bool) - (α44' -> (α44' -> bool)) ~ ([α42'] -> α45') - α45', L: 0 [(α44' -> (α44' -> bool)) ~ ([α42'] -> α45'), (α44' -> (α44' -> bool)) <: ([α42'] -> α45')]], α45' <: ([int] -> α46')]]]
//│ | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeRef
//│ | | 1. : α46'
//│ | | 1. Typing term == min 17 App
//│ | | | 1. Typing term == min App
//│ | | | | 1. Typing term == Var
//│ | | | | 1. : [(α47' -> (α47' -> bool))]
//│ | | | | 1. Typing term min Var
//│ | | | | 1. : [α43']
//│ | | | | U Q [(α47' -> (α47' -> bool))] ~ ([α43'] -> α48')
//│ | | | | U L: 0 [(α47' -> (α47' -> bool)) ~ ([α43'] -> α48'), (α47' -> (α47' -> bool)) <: ([α43'] -> α48')]
//│ | | | | U class hmloc.TyperDatatypes$FunctionType and class hmloc.TyperDatatypes$FunctionType
//│ | | | | U Q α47' ~ [α43']
//│ | | | | U Q (α47' -> bool) ~ α48'
//│ | | | | U L: 1 [α47' ~ α43', [α47' - (α47' -> (α47' -> bool)) ~ ([α43'] -> α48') - α43', L: 0 [(α47' -> (α47' -> bool)) ~ ([α43'] -> α48'), (α47' -> (α47' -> bool)) <: ([α43'] -> α48')]]]
//│ | | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeVariable
//│ | | | | U L: 1 [(α47' -> bool) ~ α48', [(α47' -> bool) - (α47' -> (α47' -> bool)) ~ ([α43'] -> α48') - α48', L: 0 [(α47' -> (α47' -> bool)) ~ ([α43'] -> α48'), (α47' -> (α47' -> bool)) <: ([α43'] -> α48')]]]
//│ | | | | U class hmloc.TyperDatatypes$FunctionType and class hmloc.TyperDatatypes$TypeVariable
//│ | | | 1. : α48'
//│ | | | 1. Typing term 17 IntLit
//│ | | | 1. : [int]
//│ | | | U Q α48' ~ ([int] -> α49')
//│ | | | U L: 0 [α48' ~ ([int] -> α49'), α48' <: ([int] -> α49')]
//│ | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$FunctionType
//│ | | | U Q (α47' -> bool) ~ ([int] -> α49')
//│ | | | U L: 1 [(α47' -> bool) ~ ([int] -> α49'), [(α47' -> bool) - (α47' -> (α47' -> bool)) ~ ([α43'] -> α48') - α48', L: 0 [(α47' -> (α47' -> bool)) ~ ([α43'] -> α48'), (α47' -> (α47' -> bool)) <: ([α43'] -> α48')]], α48' <: ([int] -> α49')]
//│ | | | U class hmloc.TyperDatatypes$FunctionType and class hmloc.TyperDatatypes$FunctionType
//│ | | | U Q α47' ~ [int]
//│ | | | U Q bool ~ α49'
//│ | | | U L: 2 [α47' ~ int, [α47' - (α47' -> bool) ~ ([int] -> α49') - int, L: 1 [(α47' -> bool) ~ ([int] -> α49'), [(α47' -> bool) - (α47' -> (α47' -> bool)) ~ ([α43'] -> α48') - α48', L: 0 [(α47' -> (α47' -> bool)) ~ ([α43'] -> α48'), (α47' -> (α47' -> bool)) <: ([α43'] -> α48')]], α48' <: ([int] -> α49')]]]
//│ | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeRef
//│ | | | U Q [α43'] ~ [int]
//│ | | | U L: 2 [bool ~ α49', [bool - (α47' -> bool) ~ ([int] -> α49') - α49', L: 1 [(α47' -> bool) ~ ([int] -> α49'), [(α47' -> bool) - (α47' -> (α47' -> bool)) ~ ([α43'] -> α48') - α48', L: 0 [(α47' -> (α47' -> bool)) ~ ([α43'] -> α48'), (α47' -> (α47' -> bool)) <: ([α43'] -> α48')]], α48' <: ([int] -> α49')]]]
//│ | | | U class hmloc.TyperDatatypes$TypeRef and class hmloc.TyperDatatypes$TypeVariable
//│ | | | U L: 2 [α43' ~ int, [α43' - ([α43'] -> α48') ~ (α47' -> (α47' -> bool)) - α47', L: 0 [([α43'] -> α48') ~ (α47' -> (α47' -> bool)), ([α43'] -> α48') :> (α47' -> (α47' -> bool))]], [α47' - (α47' -> bool) ~ ([int] -> α49') - int, L: 1 [(α47' -> bool) ~ ([int] -> α49'), [(α47' -> bool) - (α47' -> (α47' -> bool)) ~ ([α43'] -> α48') - α48', L: 0 [(α47' -> (α47' -> bool)) ~ ([α43'] -> α48'), (α47' -> (α47' -> bool)) <: ([α43'] -> α48')]], α48' <: ([int] -> α49')]]]
//│ | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeRef
//│ | | 1. : α49'
//│ | 1. : ([α46'], [α49'],)
//│ 1. : (([α42'], [α43'],) -> ([α46'], [α49'],))
//│ ⬤ U Typed as: (([α42'], [α43'],) -> ([α46'], [α49'],))
//│  where: 
//│ 1. Typing term package => if breaking_change (version package)(_, minor_version_breaking,) then if minor_version_breaking(true) then print_endline "don't deploy" then (false) then print_endline "deploy" Lam
//│ | 1. Typing pattern package Var
//│ | 1. : α52'
//│ | 1. Typing term if breaking_change (version package)(_, minor_version_breaking,) then if minor_version_breaking(true) then print_endline "don't deploy" then (false) then print_endline "deploy" If
//│ | | If(App(Var(breaking_change), App(Var(version), Var(package))), List(IfThen(Tup(Var(_), Var(minor_version_breaking)), If(Var(minor_version_breaking), List(IfThen(Var(true), App(Var(print_endline), StrLit(don't deploy)), IfThen(Var(false), App(Var(print_endline), StrLit(deploy))))))
//│ | | typed condition term breaking_change (version package)
//│ | | 1. Typing term breaking_change (version package) App
//│ | | | 1. Typing term breaking_change Var
//│ | | | 1. : [(([α53'], [α57'],) -> ([α55'], [α59'],))]
//│ | | | 1. Typing term version package App
//│ | | | | 1. Typing term version Var
//│ | | | | 1. : [(string -> ([int], [int],))]
//│ | | | | 1. Typing term package Var
//│ | | | | 1. : [α52']
//│ | | | | U Q [(string -> ([int], [int],))] ~ ([α52'] -> α61')
//│ | | | | U L: 0 [(string -> ([int], [int],)) ~ ([α52'] -> α61'), (string -> ([int], [int],)) <: ([α52'] -> α61')]
//│ | | | | U class hmloc.TyperDatatypes$FunctionType and class hmloc.TyperDatatypes$FunctionType
//│ | | | | U Q string ~ [α52']
//│ | | | | U Q ([int], [int],) ~ α61'
//│ | | | | U L: 1 [string ~ α52', [string - (string -> ([int], [int],)) ~ ([α52'] -> α61') - α52', L: 0 [(string -> ([int], [int],)) ~ ([α52'] -> α61'), (string -> ([int], [int],)) <: ([α52'] -> α61')]]]
//│ | | | | U class hmloc.TyperDatatypes$TypeRef and class hmloc.TyperDatatypes$TypeVariable
//│ | | | | U L: 1 [([int], [int],) ~ α61', [([int], [int],) - (string -> ([int], [int],)) ~ ([α52'] -> α61') - α61', L: 0 [(string -> ([int], [int],)) ~ ([α52'] -> α61'), (string -> ([int], [int],)) <: ([α52'] -> α61')]]]
//│ | | | | U class hmloc.TyperDatatypes$TupleType and class hmloc.TyperDatatypes$TypeVariable
//│ | | | 1. : α61'
//│ | | | U Q [(([α53'], [α57'],) -> ([α55'], [α59'],))] ~ (α61' -> α62')
//│ | | | U L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]
//│ | | | U class hmloc.TyperDatatypes$FunctionType and class hmloc.TyperDatatypes$FunctionType
//│ | | | U Q ([α53'], [α57'],) ~ α61'
//│ | | | U Q ([α55'], [α59'],) ~ α62'
//│ | | | U L: 1 [([α53'], [α57'],) ~ α61', [([α53'], [α57'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α61', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]]]
//│ | | | U class hmloc.TyperDatatypes$TupleType and class hmloc.TyperDatatypes$TypeVariable
//│ | | | U Q ([α53'], [α57'],) ~ ([int], [int],)
//│ | | | U L: 1 [([α55'], [α59'],) ~ α62', [([α55'], [α59'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α62', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]]]
//│ | | | U class hmloc.TyperDatatypes$TupleType and class hmloc.TyperDatatypes$TypeVariable
//│ | | | U L: 1 [([α53'], [α57'],) ~ ([int], [int],), [([α53'], [α57'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α61', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]], [α61' - ([α52'] -> α61') ~ (string -> ([int], [int],)) - ([int], [int],), L: 0 [([α52'] -> α61') ~ (string -> ([int], [int],)), ([α52'] -> α61') :> (string -> ([int], [int],))]]]
//│ | | | U class hmloc.TyperDatatypes$TupleType and class hmloc.TyperDatatypes$TupleType
//│ | | | U Q [α53'] ~ [int]
//│ | | | U Q [α57'] ~ [int]
//│ | | | U L: 2 [α53' ~ int, [α53' - ([α53'], [α57'],) ~ ([int], [int],) - int, L: 1 [([α53'], [α57'],) ~ ([int], [int],), [([α53'], [α57'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α61', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]], [α61' - ([α52'] -> α61') ~ (string -> ([int], [int],)) - ([int], [int],), L: 0 [([α52'] -> α61') ~ (string -> ([int], [int],)), ([α52'] -> α61') :> (string -> ([int], [int],))]]]]]
//│ | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeRef
//│ | | | U Q [int] ~ [int]
//│ | | | U Q α54' ~ [int]
//│ | | | U L: 2 [α57' ~ int, [α57' - ([α53'], [α57'],) ~ ([int], [int],) - int, L: 1 [([α53'], [α57'],) ~ ([int], [int],), [([α53'], [α57'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α61', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]], [α61' - ([α52'] -> α61') ~ (string -> ([int], [int],)) - ([int], [int],), L: 0 [([α52'] -> α61') ~ (string -> ([int], [int],)), ([α52'] -> α61') :> (string -> ([int], [int],))]]]]]
//│ | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeRef
//│ | | | U Q α58' ~ [int]
//│ | | | U L: 2 [int ~ int, [int - ([int] -> α55') ~ (α54' -> bool) - α54', L: 1 [([int] -> α55') ~ (α54' -> bool), ([int] -> α55') :> α56', [α56' - ([α53'] -> α56') ~ (α54' -> (α54' -> bool)) - (α54' -> bool), L: 0 [([α53'] -> α56') ~ (α54' -> (α54' -> bool)), ([α53'] -> α56') :> (α54' -> (α54' -> bool))]]]], [α54' - (α54' -> (α54' -> bool)) ~ ([α53'] -> α56') - α53', L: 0 [(α54' -> (α54' -> bool)) ~ ([α53'] -> α56'), (α54' -> (α54' -> bool)) <: ([α53'] -> α56')]], [α53' - ([α53'], [α57'],) ~ ([int], [int],) - int, L: 1 [([α53'], [α57'],) ~ ([int], [int],), [([α53'], [α57'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α61', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]], [α61' - ([α52'] -> α61') ~ (string -> ([int], [int],)) - ([int], [int],), L: 0 [([α52'] -> α61') ~ (string -> ([int], [int],)), ([α52'] -> α61') :> (string -> ([int], [int],))]]]]]
//│ | | | U class hmloc.TyperDatatypes$TypeRef and class hmloc.TyperDatatypes$TypeRef
//│ | | | U L: 2 [α54' ~ int, [α54' - (α54' -> (α54' -> bool)) ~ ([α53'] -> α56') - α53', L: 0 [(α54' -> (α54' -> bool)) ~ ([α53'] -> α56'), (α54' -> (α54' -> bool)) <: ([α53'] -> α56')]], [α53' - ([α53'], [α57'],) ~ ([int], [int],) - int, L: 1 [([α53'], [α57'],) ~ ([int], [int],), [([α53'], [α57'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α61', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]], [α61' - ([α52'] -> α61') ~ (string -> ([int], [int],)) - ([int], [int],), L: 0 [([α52'] -> α61') ~ (string -> ([int], [int],)), ([α52'] -> α61') :> (string -> ([int], [int],))]]]]]
//│ | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeRef
//│ | | | U L: 2 [α58' ~ int, [α58' - (α58' -> (α58' -> bool)) ~ ([α57'] -> α60') - α57', L: 0 [(α58' -> (α58' -> bool)) ~ ([α57'] -> α60'), (α58' -> (α58' -> bool)) <: ([α57'] -> α60')]], [α57' - ([α53'], [α57'],) ~ ([int], [int],) - int, L: 1 [([α53'], [α57'],) ~ ([int], [int],), [([α53'], [α57'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α61', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]], [α61' - ([α52'] -> α61') ~ (string -> ([int], [int],)) - ([int], [int],), L: 0 [([α52'] -> α61') ~ (string -> ([int], [int],)), ([α52'] -> α61') :> (string -> ([int], [int],))]]]]]
//│ | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeRef
//│ | | 1. : α62'
//│ | | fields List(_, minor_version_breaking)
//│ | | Typing _ field 0 in tup
//│ | | Field _ : [α64']
//│ | | Typing minor_version_breaking field 1 in tup
//│ | | Field minor_version_breaking : [α65']
//│ | | U Q α62' ~ [([α64'], [α65'],)]
//│ | | U L: 0 [α62' ~ ([α64'], [α65'],), α62' <: ([α64'], [α65'],)]
//│ | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TupleType
//│ | | U Q ([α55'], [α59'],) ~ [([α64'], [α65'],)]
//│ | | U L: 1 [([α55'], [α59'],) ~ ([α64'], [α65'],), [([α55'], [α59'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α62', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]], α62' <: ([α64'], [α65'],)]
//│ | | U class hmloc.TyperDatatypes$TupleType and class hmloc.TyperDatatypes$TupleType
//│ | | U Q [α55'] ~ [α64']
//│ | | U Q [α59'] ~ [α65']
//│ | | U L: 2 [α55' ~ α64', [α55' - ([α55'], [α59'],) ~ ([α64'], [α65'],) - α64', L: 1 [([α55'], [α59'],) ~ ([α64'], [α65'],), [([α55'], [α59'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α62', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]], α62' <: ([α64'], [α65'],)]]]
//│ | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeVariable
//│ | | U Q bool ~ [α64']
//│ | | U L: 2 [α59' ~ α65', [α59' - ([α55'], [α59'],) ~ ([α64'], [α65'],) - α65', L: 1 [([α55'], [α59'],) ~ ([α64'], [α65'],), [([α55'], [α59'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α62', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]], α62' <: ([α64'], [α65'],)]]]
//│ | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeVariable
//│ | | U Q bool ~ [α65']
//│ | | U L: 2 [bool ~ α64', [bool - (α54' -> bool) ~ ([int] -> α55') - α55', L: 1 [(α54' -> bool) ~ ([int] -> α55'), [(α54' -> bool) - (α54' -> (α54' -> bool)) ~ ([α53'] -> α56') - α56', L: 0 [(α54' -> (α54' -> bool)) ~ ([α53'] -> α56'), (α54' -> (α54' -> bool)) <: ([α53'] -> α56')]], α56' <: ([int] -> α55')]], [α55' - ([α55'], [α59'],) ~ ([α64'], [α65'],) - α64', L: 1 [([α55'], [α59'],) ~ ([α64'], [α65'],), [([α55'], [α59'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α62', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]], α62' <: ([α64'], [α65'],)]]]
//│ | | U class hmloc.TyperDatatypes$TypeRef and class hmloc.TyperDatatypes$TypeVariable
//│ | | U Q bool ~ [α55']
//│ | | U L: 2 [bool ~ α65', [bool - (α58' -> bool) ~ ([int] -> α59') - α59', L: 1 [(α58' -> bool) ~ ([int] -> α59'), [(α58' -> bool) - (α58' -> (α58' -> bool)) ~ ([α57'] -> α60') - α60', L: 0 [(α58' -> (α58' -> bool)) ~ ([α57'] -> α60'), (α58' -> (α58' -> bool)) <: ([α57'] -> α60')]], α60' <: ([int] -> α59')]], [α59' - ([α55'], [α59'],) ~ ([α64'], [α65'],) - α65', L: 1 [([α55'], [α59'],) ~ ([α64'], [α65'],), [([α55'], [α59'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α62', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]], α62' <: ([α64'], [α65'],)]]]
//│ | | U class hmloc.TyperDatatypes$TypeRef and class hmloc.TyperDatatypes$TypeVariable
//│ | | U Q bool ~ [α59']
//│ | | U L: 2 [bool ~ α55', [bool - (α54' -> bool) ~ ([int] -> α55') - α55', L: 1 [(α54' -> bool) ~ ([int] -> α55'), [(α54' -> bool) - (α54' -> (α54' -> bool)) ~ ([α53'] -> α56') - α56', L: 0 [(α54' -> (α54' -> bool)) ~ ([α53'] -> α56'), (α54' -> (α54' -> bool)) <: ([α53'] -> α56')]], α56' <: ([int] -> α55')]], [α55' - ([α55'], [α59'],) ~ ([α64'], [α65'],) - α64', L: 1 [([α55'], [α59'],) ~ ([α64'], [α65'],), [([α55'], [α59'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α62', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]], α62' <: ([α64'], [α65'],)]], [α64' - ([α64'], [α65'],) ~ ([α55'], [α59'],) - α55', L: 1 [([α64'], [α65'],) ~ ([α55'], [α59'],), ([α64'], [α65'],) :> α62', [α62' - (α61' -> α62') ~ (([α53'], [α57'],) -> ([α55'], [α59'],)) - ([α55'], [α59'],), L: 0 [(α61' -> α62') ~ (([α53'], [α57'],) -> ([α55'], [α59'],)), (α61' -> α62') :> (([α53'], [α57'],) -> ([α55'], [α59'],))]]]]]
//│ | | U class hmloc.TyperDatatypes$TypeRef and class hmloc.TyperDatatypes$TypeVariable
//│ | | U Q bool ~ bool
//│ | | U L: 2 [bool ~ α59', [bool - (α58' -> bool) ~ ([int] -> α59') - α59', L: 1 [(α58' -> bool) ~ ([int] -> α59'), [(α58' -> bool) - (α58' -> (α58' -> bool)) ~ ([α57'] -> α60') - α60', L: 0 [(α58' -> (α58' -> bool)) ~ ([α57'] -> α60'), (α58' -> (α58' -> bool)) <: ([α57'] -> α60')]], α60' <: ([int] -> α59')]], [α59' - ([α55'], [α59'],) ~ ([α64'], [α65'],) - α65', L: 1 [([α55'], [α59'],) ~ ([α64'], [α65'],), [([α55'], [α59'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α62', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]], α62' <: ([α64'], [α65'],)]], [α65' - ([α64'], [α65'],) ~ ([α55'], [α59'],) - α59', L: 1 [([α64'], [α65'],) ~ ([α55'], [α59'],), ([α64'], [α65'],) :> α62', [α62' - (α61' -> α62') ~ (([α53'], [α57'],) -> ([α55'], [α59'],)) - ([α55'], [α59'],), L: 0 [(α61' -> α62') ~ (([α53'], [α57'],) -> ([α55'], [α59'],)), (α61' -> α62') :> (([α53'], [α57'],) -> ([α55'], [α59'],))]]]]]
//│ | | U class hmloc.TyperDatatypes$TypeRef and class hmloc.TyperDatatypes$TypeVariable
//│ | | U L: 2 [bool ~ bool, [bool - (α54' -> bool) ~ ([int] -> α55') - α55', L: 1 [(α54' -> bool) ~ ([int] -> α55'), [(α54' -> bool) - (α54' -> (α54' -> bool)) ~ ([α53'] -> α56') - α56', L: 0 [(α54' -> (α54' -> bool)) ~ ([α53'] -> α56'), (α54' -> (α54' -> bool)) <: ([α53'] -> α56')]], α56' <: ([int] -> α55')]], [α55' - ([α55'], [α59'],) ~ ([α64'], [α65'],) - α64', L: 1 [([α55'], [α59'],) ~ ([α64'], [α65'],), [([α55'], [α59'],) - (([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62') - α62', L: 0 [(([α53'], [α57'],) -> ([α55'], [α59'],)) ~ (α61' -> α62'), (([α53'], [α57'],) -> ([α55'], [α59'],)) <: (α61' -> α62')]], α62' <: ([α64'], [α65'],)]], [α64' - ([α64'], [α65'],) ~ ([α55'], [α59'],) - α55', L: 1 [([α64'], [α65'],) ~ ([α55'], [α59'],), ([α64'], [α65'],) :> α62', [α62' - (α61' -> α62') ~ (([α53'], [α57'],) -> ([α55'], [α59'],)) - ([α55'], [α59'],), L: 0 [(α61' -> α62') ~ (([α53'], [α57'],) -> ([α55'], [α59'],)), (α61' -> α62') :> (([α53'], [α57'],) -> ([α55'], [α59'],))]]]], [α55' - ([int] -> α55') ~ (α54' -> bool) - bool, L: 1 [([int] -> α55') ~ (α54' -> bool), ([int] -> α55') :> α56', [α56' - ([α53'] -> α56') ~ (α54' -> (α54' -> bool)) - (α54' -> bool), L: 0 [([α53'] -> α56') ~ (α54' -> (α54' -> bool)), ([α53'] -> α56') :> (α54' -> (α54' -> bool))]]]]]
//│ | | U class hmloc.TyperDatatypes$TypeRef and class hmloc.TyperDatatypes$TypeRef
//│ | | 1. Typing term if minor_version_breaking(true) then print_endline "don't deploy" then (false) then print_endline "deploy" If
//│ | | | If(Var(minor_version_breaking), List(IfThen(Var(true), App(Var(print_endline), StrLit(don't deploy)), IfThen(Var(false), App(Var(print_endline), StrLit(deploy))))
//│ | | | 1. Typing term minor_version_breaking Var
//│ | | | 1. : [[α65']]
//│ | | | U Q [[α65']] ~ bool
//│ | | | U L: 0 [α65' ~ bool, α65' <: bool]
//│ | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeRef
//│ | | | 1. Typing term print_endline "don't deploy" App
//│ | | | | 1. Typing term print_endline Var
//│ | | | | 1. : [(string -> unit)]
//│ | | | | 1. Typing term "don't deploy" StrLit
//│ | | | | 1. : [string]
//│ | | | | U Q [(string -> unit)] ~ ([string] -> α67')
//│ | | | | U L: 0 [(string -> unit) ~ ([string] -> α67'), (string -> unit) <: ([string] -> α67')]
//│ | | | | U class hmloc.TyperDatatypes$FunctionType and class hmloc.TyperDatatypes$FunctionType
//│ | | | | U Q string ~ [string]
//│ | | | | U Q unit ~ α67'
//│ | | | | U L: 1 [string ~ string, [string - (string -> unit) ~ ([string] -> α67') - string, L: 0 [(string -> unit) ~ ([string] -> α67'), (string -> unit) <: ([string] -> α67')]]]
//│ | | | | U class hmloc.TyperDatatypes$TypeRef and class hmloc.TyperDatatypes$TypeRef
//│ | | | | U L: 1 [unit ~ α67', [unit - (string -> unit) ~ ([string] -> α67') - α67', L: 0 [(string -> unit) ~ ([string] -> α67'), (string -> unit) <: ([string] -> α67')]]]
//│ | | | | U class hmloc.TyperDatatypes$TypeRef and class hmloc.TyperDatatypes$TypeVariable
//│ | | | 1. : α67'
//│ | | | U Q α67' ~ α66'
//│ | | | U L: 0 [α67' ~ α66', α67' <: α66']
//│ | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeVariable
//│ | | | U Q unit ~ α66'
//│ | | | U L: 1 [unit ~ α66', [unit - (string -> unit) ~ ([string] -> α67') - α67', L: 0 [(string -> unit) ~ ([string] -> α67'), (string -> unit) <: ([string] -> α67')]], α67' <: α66']
//│ | | | U class hmloc.TyperDatatypes$TypeRef and class hmloc.TyperDatatypes$TypeVariable
//│ | | | 1. Typing term print_endline "deploy" App
//│ | | | | 1. Typing term print_endline Var
//│ | | | | 1. : [(string -> unit)]
//│ | | | | 1. Typing term "deploy" StrLit
//│ | | | | 1. : [string]
//│ | | | | U Q [(string -> unit)] ~ ([string] -> α68')
//│ | | | | U L: 0 [(string -> unit) ~ ([string] -> α68'), (string -> unit) <: ([string] -> α68')]
//│ | | | | U class hmloc.TyperDatatypes$FunctionType and class hmloc.TyperDatatypes$FunctionType
//│ | | | | U Q unit ~ α68'
//│ | | | | U L: 1 [unit ~ α68', [unit - (string -> unit) ~ ([string] -> α68') - α68', L: 0 [(string -> unit) ~ ([string] -> α68'), (string -> unit) <: ([string] -> α68')]]]
//│ | | | | U class hmloc.TyperDatatypes$TypeRef and class hmloc.TyperDatatypes$TypeVariable
//│ | | | 1. : α68'
//│ | | | U Q α68' ~ α66'
//│ | | | U L: 0 [α68' ~ α66', α68' <: α66']
//│ | | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeVariable
//│ | | 1. : α66'
//│ | | U Q α66' ~ α63'
//│ | | U L: 0 [α66' ~ α63', α66' <: α63']
//│ | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeVariable
//│ | | U Q α68' ~ α63'
//│ | | U Q unit ~ α63'
//│ | | U Q α67' ~ α63'
//│ | | U L: 0 [α68' ~ α63', α68' <: α66', α66' <: α63']
//│ | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeVariable
//│ | | U L: 1 [unit ~ α63', [unit - (string -> unit) ~ ([string] -> α67') - α67', L: 0 [(string -> unit) ~ ([string] -> α67'), (string -> unit) <: ([string] -> α67')]], α67' <: α66', α66' <: α63']
//│ | | U class hmloc.TyperDatatypes$TypeRef and class hmloc.TyperDatatypes$TypeVariable
//│ | | U L: 0 [α67' ~ α63', α67' <: α66', α66' <: α63']
//│ | | U class hmloc.TyperDatatypes$TypeVariable and class hmloc.TyperDatatypes$TypeVariable
//│ | 1. : α63'
//│ 1. : (α52' -> α63')
//│ ⬤ U Typed as: (α52' -> α63')
//│  where: 
//│ version: string -> (int, int,)
//│ breaking_change: (int, int,) -> (bool, bool,)
//│ deploy: string -> unit
//│ U max: 3, total: 50
